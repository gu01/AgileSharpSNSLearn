#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgileSharp.SNS.Repository
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="AgileSharpSNS")]
	public partial class AgileSharpSNSDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Inserttb_AccountPermission(tb_AccountPermission instance);
    partial void Updatetb_AccountPermission(tb_AccountPermission instance);
    partial void Deletetb_AccountPermission(tb_AccountPermission instance);
    partial void Inserttb_VisibilityLevel(tb_VisibilityLevel instance);
    partial void Updatetb_VisibilityLevel(tb_VisibilityLevel instance);
    partial void Deletetb_VisibilityLevel(tb_VisibilityLevel instance);
    partial void Inserttb_Account(tb_Account instance);
    partial void Updatetb_Account(tb_Account instance);
    partial void Deletetb_Account(tb_Account instance);
    partial void Inserttb_Alert(tb_Alert instance);
    partial void Updatetb_Alert(tb_Alert instance);
    partial void Deletetb_Alert(tb_Alert instance);
    partial void Inserttb_AlertType(tb_AlertType instance);
    partial void Updatetb_AlertType(tb_AlertType instance);
    partial void Deletetb_AlertType(tb_AlertType instance);
    partial void Inserttb_Permission(tb_Permission instance);
    partial void Updatetb_Permission(tb_Permission instance);
    partial void Deletetb_Permission(tb_Permission instance);
    partial void Inserttb_ProductAttribute(tb_ProductAttribute instance);
    partial void Updatetb_ProductAttribute(tb_ProductAttribute instance);
    partial void Deletetb_ProductAttribute(tb_ProductAttribute instance);
    partial void Inserttb_ProductCategory(tb_ProductCategory instance);
    partial void Updatetb_ProductCategory(tb_ProductCategory instance);
    partial void Deletetb_ProductCategory(tb_ProductCategory instance);
    partial void Inserttb_Product(tb_Product instance);
    partial void Updatetb_Product(tb_Product instance);
    partial void Deletetb_Product(tb_Product instance);
    partial void Inserttb_ProfileAttribute(tb_ProfileAttribute instance);
    partial void Updatetb_ProfileAttribute(tb_ProfileAttribute instance);
    partial void Deletetb_ProfileAttribute(tb_ProfileAttribute instance);
    partial void Inserttb_Profile(tb_Profile instance);
    partial void Updatetb_Profile(tb_Profile instance);
    partial void Deletetb_Profile(tb_Profile instance);
    partial void Inserttb_Term(tb_Term instance);
    partial void Updatetb_Term(tb_Term instance);
    partial void Deletetb_Term(tb_Term instance);
    #endregion
		
		public AgileSharpSNSDataContext() : 
				base(global::AgileSharp.SNS.Repository.Properties.Settings.Default.AgileSharpSNSConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public AgileSharpSNSDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AgileSharpSNSDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AgileSharpSNSDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AgileSharpSNSDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<tb_AccountPermission> tb_AccountPermissions
		{
			get
			{
				return this.GetTable<tb_AccountPermission>();
			}
		}
		
		public System.Data.Linq.Table<tb_VisibilityLevel> tb_VisibilityLevels
		{
			get
			{
				return this.GetTable<tb_VisibilityLevel>();
			}
		}
		
		public System.Data.Linq.Table<tb_Account> tb_Accounts
		{
			get
			{
				return this.GetTable<tb_Account>();
			}
		}
		
		public System.Data.Linq.Table<tb_Alert> tb_Alerts
		{
			get
			{
				return this.GetTable<tb_Alert>();
			}
		}
		
		public System.Data.Linq.Table<tb_AlertType> tb_AlertTypes
		{
			get
			{
				return this.GetTable<tb_AlertType>();
			}
		}
		
		public System.Data.Linq.Table<tb_Permission> tb_Permissions
		{
			get
			{
				return this.GetTable<tb_Permission>();
			}
		}
		
		public System.Data.Linq.Table<tb_ProductAttribute> tb_ProductAttributes
		{
			get
			{
				return this.GetTable<tb_ProductAttribute>();
			}
		}
		
		public System.Data.Linq.Table<tb_ProductCategory> tb_ProductCategories
		{
			get
			{
				return this.GetTable<tb_ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<tb_Product> tb_Products
		{
			get
			{
				return this.GetTable<tb_Product>();
			}
		}
		
		public System.Data.Linq.Table<tb_ProfileAttribute> tb_ProfileAttributes
		{
			get
			{
				return this.GetTable<tb_ProfileAttribute>();
			}
		}
		
		public System.Data.Linq.Table<tb_Profile> tb_Profiles
		{
			get
			{
				return this.GetTable<tb_Profile>();
			}
		}
		
		public System.Data.Linq.Table<tb_Term> tb_Terms
		{
			get
			{
				return this.GetTable<tb_Term>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_AccountPermissions")]
	public partial class tb_AccountPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _apId;
		
		private int _AccountId;
		
		private int _PermissionId;
		
		private EntityRef<tb_Account> _tb_Account;
		
		private EntityRef<tb_Permission> _tb_Permission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnapIdChanging(int value);
    partial void OnapIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnPermissionIdChanging(int value);
    partial void OnPermissionIdChanged();
    #endregion
		
		public tb_AccountPermission()
		{
			this._tb_Account = default(EntityRef<tb_Account>);
			this._tb_Permission = default(EntityRef<tb_Permission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_apId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int apId
		{
			get
			{
				return this._apId;
			}
			set
			{
				if ((this._apId != value))
				{
					this.OnapIdChanging(value);
					this.SendPropertyChanging();
					this._apId = value;
					this.SendPropertyChanged("apId");
					this.OnapIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL")]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._tb_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", DbType="Int NOT NULL")]
		public int PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					if (this._tb_Permission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_AccountPermission", Storage="_tb_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public tb_Account tb_Account
		{
			get
			{
				return this._tb_Account.Entity;
			}
			set
			{
				tb_Account previousValue = this._tb_Account.Entity;
				if (((previousValue != value) 
							|| (this._tb_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Account.Entity = null;
						previousValue.tb_AccountPermissions.Remove(this);
					}
					this._tb_Account.Entity = value;
					if ((value != null))
					{
						value.tb_AccountPermissions.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("tb_Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Permission_tb_AccountPermission", Storage="_tb_Permission", ThisKey="PermissionId", OtherKey="PermissionId", IsForeignKey=true)]
		public tb_Permission tb_Permission
		{
			get
			{
				return this._tb_Permission.Entity;
			}
			set
			{
				tb_Permission previousValue = this._tb_Permission.Entity;
				if (((previousValue != value) 
							|| (this._tb_Permission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Permission.Entity = null;
						previousValue.tb_AccountPermissions.Remove(this);
					}
					this._tb_Permission.Entity = value;
					if ((value != null))
					{
						value.tb_AccountPermissions.Add(this);
						this._PermissionId = value.PermissionId;
					}
					else
					{
						this._PermissionId = default(int);
					}
					this.SendPropertyChanged("tb_Permission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_VisibilityLevels")]
	public partial class tb_VisibilityLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _VisibilityLevelId;
		
		private string _Name;
		
		private EntitySet<tb_ProductAttribute> _tb_ProductAttributes;
		
		private EntitySet<tb_ProfileAttribute> _tb_ProfileAttributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVisibilityLevelIdChanging(int value);
    partial void OnVisibilityLevelIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tb_VisibilityLevel()
		{
			this._tb_ProductAttributes = new EntitySet<tb_ProductAttribute>(new Action<tb_ProductAttribute>(this.attach_tb_ProductAttributes), new Action<tb_ProductAttribute>(this.detach_tb_ProductAttributes));
			this._tb_ProfileAttributes = new EntitySet<tb_ProfileAttribute>(new Action<tb_ProfileAttribute>(this.attach_tb_ProfileAttributes), new Action<tb_ProfileAttribute>(this.detach_tb_ProfileAttributes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityLevelId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int VisibilityLevelId
		{
			get
			{
				return this._VisibilityLevelId;
			}
			set
			{
				if ((this._VisibilityLevelId != value))
				{
					this.OnVisibilityLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelId = value;
					this.SendPropertyChanged("VisibilityLevelId");
					this.OnVisibilityLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_VisibilityLevel_tb_ProductAttribute", Storage="_tb_ProductAttributes", ThisKey="VisibilityLevelId", OtherKey="VisibilityLevelId")]
		public EntitySet<tb_ProductAttribute> tb_ProductAttributes
		{
			get
			{
				return this._tb_ProductAttributes;
			}
			set
			{
				this._tb_ProductAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_VisibilityLevel_tb_ProfileAttribute", Storage="_tb_ProfileAttributes", ThisKey="VisibilityLevelId", OtherKey="VisibilityLevelId")]
		public EntitySet<tb_ProfileAttribute> tb_ProfileAttributes
		{
			get
			{
				return this._tb_ProfileAttributes;
			}
			set
			{
				this._tb_ProfileAttributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ProductAttributes(tb_ProductAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_VisibilityLevel = this;
		}
		
		private void detach_tb_ProductAttributes(tb_ProductAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_VisibilityLevel = null;
		}
		
		private void attach_tb_ProfileAttributes(tb_ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_VisibilityLevel = this;
		}
		
		private void detach_tb_ProfileAttributes(tb_ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_VisibilityLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Accounts")]
	public partial class tb_Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AccountId;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private bool _EmailVerfied;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private int _TermId;
		
		private System.Nullable<System.DateTime> _AgreedToTermsDate;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<tb_AccountPermission> _tb_AccountPermissions;
		
		private EntitySet<tb_Alert> _tb_Alerts;
		
		private EntitySet<tb_Product> _tb_Products;
		
		private EntitySet<tb_Profile> _tb_Profiles;
		
		private EntityRef<tb_Term> _tb_Term;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailVerfiedChanging(bool value);
    partial void OnEmailVerfiedChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnAgreedToTermsDateChanging(System.Nullable<System.DateTime> value);
    partial void OnAgreedToTermsDateChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public tb_Account()
		{
			this._tb_AccountPermissions = new EntitySet<tb_AccountPermission>(new Action<tb_AccountPermission>(this.attach_tb_AccountPermissions), new Action<tb_AccountPermission>(this.detach_tb_AccountPermissions));
			this._tb_Alerts = new EntitySet<tb_Alert>(new Action<tb_Alert>(this.attach_tb_Alerts), new Action<tb_Alert>(this.detach_tb_Alerts));
			this._tb_Products = new EntitySet<tb_Product>(new Action<tb_Product>(this.attach_tb_Products), new Action<tb_Product>(this.detach_tb_Products));
			this._tb_Profiles = new EntitySet<tb_Profile>(new Action<tb_Profile>(this.attach_tb_Profiles), new Action<tb_Profile>(this.detach_tb_Profiles));
			this._tb_Term = default(EntityRef<tb_Term>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailVerfied", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public bool EmailVerfied
		{
			get
			{
				return this._EmailVerfied;
			}
			set
			{
				if ((this._EmailVerfied != value))
				{
					this.OnEmailVerfiedChanging(value);
					this.SendPropertyChanging();
					this._EmailVerfied = value;
					this.SendPropertyChanged("EmailVerfied");
					this.OnEmailVerfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					if (this._tb_Term.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgreedToTermsDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> AgreedToTermsDate
		{
			get
			{
				return this._AgreedToTermsDate;
			}
			set
			{
				if ((this._AgreedToTermsDate != value))
				{
					this.OnAgreedToTermsDateChanging(value);
					this.SendPropertyChanging();
					this._AgreedToTermsDate = value;
					this.SendPropertyChanged("AgreedToTermsDate");
					this.OnAgreedToTermsDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_AccountPermission", Storage="_tb_AccountPermissions", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<tb_AccountPermission> tb_AccountPermissions
		{
			get
			{
				return this._tb_AccountPermissions;
			}
			set
			{
				this._tb_AccountPermissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_Alert", Storage="_tb_Alerts", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<tb_Alert> tb_Alerts
		{
			get
			{
				return this._tb_Alerts;
			}
			set
			{
				this._tb_Alerts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_Product", Storage="_tb_Products", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<tb_Product> tb_Products
		{
			get
			{
				return this._tb_Products;
			}
			set
			{
				this._tb_Products.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_Profile", Storage="_tb_Profiles", ThisKey="AccountId", OtherKey="AccountId")]
		public EntitySet<tb_Profile> tb_Profiles
		{
			get
			{
				return this._tb_Profiles;
			}
			set
			{
				this._tb_Profiles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Term_tb_Account", Storage="_tb_Term", ThisKey="TermId", OtherKey="TermId", IsForeignKey=true)]
		public tb_Term tb_Term
		{
			get
			{
				return this._tb_Term.Entity;
			}
			set
			{
				tb_Term previousValue = this._tb_Term.Entity;
				if (((previousValue != value) 
							|| (this._tb_Term.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Term.Entity = null;
						previousValue.tb_Accounts.Remove(this);
					}
					this._tb_Term.Entity = value;
					if ((value != null))
					{
						value.tb_Accounts.Add(this);
						this._TermId = value.TermId;
					}
					else
					{
						this._TermId = default(int);
					}
					this.SendPropertyChanged("tb_Term");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_AccountPermissions(tb_AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = this;
		}
		
		private void detach_tb_AccountPermissions(tb_AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = null;
		}
		
		private void attach_tb_Alerts(tb_Alert entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = this;
		}
		
		private void detach_tb_Alerts(tb_Alert entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = null;
		}
		
		private void attach_tb_Products(tb_Product entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = this;
		}
		
		private void detach_tb_Products(tb_Product entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = null;
		}
		
		private void attach_tb_Profiles(tb_Profile entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = this;
		}
		
		private void detach_tb_Profiles(tb_Profile entity)
		{
			this.SendPropertyChanging();
			entity.tb_Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Alerts")]
	public partial class tb_Alert : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertId;
		
		private int _AccountId;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Version;
		
		private int _AlertTypeId;
		
		private System.Nullable<bool> _IsHidden;
		
		private string _Message;
		
		private EntityRef<tb_Account> _tb_Account;
		
		private EntityRef<tb_AlertType> _tb_AlertType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertIdChanging(int value);
    partial void OnAlertIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnAlertTypeIdChanging(int value);
    partial void OnAlertTypeIdChanged();
    partial void OnIsHiddenChanging(System.Nullable<bool> value);
    partial void OnIsHiddenChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    #endregion
		
		public tb_Alert()
		{
			this._tb_Account = default(EntityRef<tb_Account>);
			this._tb_AlertType = default(EntityRef<tb_AlertType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int AlertId
		{
			get
			{
				return this._AlertId;
			}
			set
			{
				if ((this._AlertId != value))
				{
					this.OnAlertIdChanging(value);
					this.SendPropertyChanging();
					this._AlertId = value;
					this.SendPropertyChanged("AlertId");
					this.OnAlertIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._tb_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertTypeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AlertTypeId
		{
			get
			{
				return this._AlertTypeId;
			}
			set
			{
				if ((this._AlertTypeId != value))
				{
					if (this._tb_AlertType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAlertTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeId = value;
					this.SendPropertyChanged("AlertTypeId");
					this.OnAlertTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHidden", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsHidden
		{
			get
			{
				return this._IsHidden;
			}
			set
			{
				if ((this._IsHidden != value))
				{
					this.OnIsHiddenChanging(value);
					this.SendPropertyChanging();
					this._IsHidden = value;
					this.SendPropertyChanged("IsHidden");
					this.OnIsHiddenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_Alert", Storage="_tb_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public tb_Account tb_Account
		{
			get
			{
				return this._tb_Account.Entity;
			}
			set
			{
				tb_Account previousValue = this._tb_Account.Entity;
				if (((previousValue != value) 
							|| (this._tb_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Account.Entity = null;
						previousValue.tb_Alerts.Remove(this);
					}
					this._tb_Account.Entity = value;
					if ((value != null))
					{
						value.tb_Alerts.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("tb_Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_AlertType_tb_Alert", Storage="_tb_AlertType", ThisKey="AlertTypeId", OtherKey="AlertTypeId", IsForeignKey=true)]
		public tb_AlertType tb_AlertType
		{
			get
			{
				return this._tb_AlertType.Entity;
			}
			set
			{
				tb_AlertType previousValue = this._tb_AlertType.Entity;
				if (((previousValue != value) 
							|| (this._tb_AlertType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_AlertType.Entity = null;
						previousValue.tb_Alerts.Remove(this);
					}
					this._tb_AlertType.Entity = value;
					if ((value != null))
					{
						value.tb_Alerts.Add(this);
						this._AlertTypeId = value.AlertTypeId;
					}
					else
					{
						this._AlertTypeId = default(int);
					}
					this.SendPropertyChanged("tb_AlertType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_AlertTypes")]
	public partial class tb_AlertType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AlertTypeId;
		
		private string _Name;
		
		private EntitySet<tb_Alert> _tb_Alerts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAlertTypeIdChanging(int value);
    partial void OnAlertTypeIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tb_AlertType()
		{
			this._tb_Alerts = new EntitySet<tb_Alert>(new Action<tb_Alert>(this.attach_tb_Alerts), new Action<tb_Alert>(this.detach_tb_Alerts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AlertTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AlertTypeId
		{
			get
			{
				return this._AlertTypeId;
			}
			set
			{
				if ((this._AlertTypeId != value))
				{
					this.OnAlertTypeIdChanging(value);
					this.SendPropertyChanging();
					this._AlertTypeId = value;
					this.SendPropertyChanged("AlertTypeId");
					this.OnAlertTypeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_AlertType_tb_Alert", Storage="_tb_Alerts", ThisKey="AlertTypeId", OtherKey="AlertTypeId")]
		public EntitySet<tb_Alert> tb_Alerts
		{
			get
			{
				return this._tb_Alerts;
			}
			set
			{
				this._tb_Alerts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_Alerts(tb_Alert entity)
		{
			this.SendPropertyChanging();
			entity.tb_AlertType = this;
		}
		
		private void detach_tb_Alerts(tb_Alert entity)
		{
			this.SendPropertyChanging();
			entity.tb_AlertType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Permissions")]
	public partial class tb_Permission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PermissionId;
		
		private string _Name;
		
		private EntitySet<tb_AccountPermission> _tb_AccountPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPermissionIdChanging(int value);
    partial void OnPermissionIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tb_Permission()
		{
			this._tb_AccountPermissions = new EntitySet<tb_AccountPermission>(new Action<tb_AccountPermission>(this.attach_tb_AccountPermissions), new Action<tb_AccountPermission>(this.detach_tb_AccountPermissions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PermissionId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PermissionId
		{
			get
			{
				return this._PermissionId;
			}
			set
			{
				if ((this._PermissionId != value))
				{
					this.OnPermissionIdChanging(value);
					this.SendPropertyChanging();
					this._PermissionId = value;
					this.SendPropertyChanged("PermissionId");
					this.OnPermissionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Permission_tb_AccountPermission", Storage="_tb_AccountPermissions", ThisKey="PermissionId", OtherKey="PermissionId")]
		public EntitySet<tb_AccountPermission> tb_AccountPermissions
		{
			get
			{
				return this._tb_AccountPermissions;
			}
			set
			{
				this._tb_AccountPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_AccountPermissions(tb_AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.tb_Permission = this;
		}
		
		private void detach_tb_AccountPermissions(tb_AccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.tb_Permission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_ProductAttributes")]
	public partial class tb_ProductAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductAttributeId;
		
		private string _FieldName;
		
		private string _Value;
		
		private int _VisibilityLevelId;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Data.Linq.Binary _Version;
		
		private int _ProductId;
		
		private EntityRef<tb_VisibilityLevel> _tb_VisibilityLevel;
		
		private EntityRef<tb_Product> _tb_Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductAttributeIdChanging(int value);
    partial void OnProductAttributeIdChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnVisibilityLevelIdChanging(int value);
    partial void OnVisibilityLevelIdChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    #endregion
		
		public tb_ProductAttribute()
		{
			this._tb_VisibilityLevel = default(EntityRef<tb_VisibilityLevel>);
			this._tb_Product = default(EntityRef<tb_Product>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductAttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProductAttributeId
		{
			get
			{
				return this._ProductAttributeId;
			}
			set
			{
				if ((this._ProductAttributeId != value))
				{
					this.OnProductAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ProductAttributeId = value;
					this.SendPropertyChanged("ProductAttributeId");
					this.OnProductAttributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityLevelId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisibilityLevelId
		{
			get
			{
				return this._VisibilityLevelId;
			}
			set
			{
				if ((this._VisibilityLevelId != value))
				{
					if (this._tb_VisibilityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisibilityLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelId = value;
					this.SendPropertyChanged("VisibilityLevelId");
					this.OnVisibilityLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._tb_Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_VisibilityLevel_tb_ProductAttribute", Storage="_tb_VisibilityLevel", ThisKey="VisibilityLevelId", OtherKey="VisibilityLevelId", IsForeignKey=true)]
		public tb_VisibilityLevel tb_VisibilityLevel
		{
			get
			{
				return this._tb_VisibilityLevel.Entity;
			}
			set
			{
				tb_VisibilityLevel previousValue = this._tb_VisibilityLevel.Entity;
				if (((previousValue != value) 
							|| (this._tb_VisibilityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_VisibilityLevel.Entity = null;
						previousValue.tb_ProductAttributes.Remove(this);
					}
					this._tb_VisibilityLevel.Entity = value;
					if ((value != null))
					{
						value.tb_ProductAttributes.Add(this);
						this._VisibilityLevelId = value.VisibilityLevelId;
					}
					else
					{
						this._VisibilityLevelId = default(int);
					}
					this.SendPropertyChanged("tb_VisibilityLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Product_tb_ProductAttribute", Storage="_tb_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public tb_Product tb_Product
		{
			get
			{
				return this._tb_Product.Entity;
			}
			set
			{
				tb_Product previousValue = this._tb_Product.Entity;
				if (((previousValue != value) 
							|| (this._tb_Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Product.Entity = null;
						previousValue.tb_ProductAttributes.Remove(this);
					}
					this._tb_Product.Entity = value;
					if ((value != null))
					{
						value.tb_ProductAttributes.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("tb_Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_ProductCategories")]
	public partial class tb_ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CategoryId;
		
		private string _Name;
		
		private System.Nullable<int> _ParentId;
		
		private System.Nullable<int> _ViewCount;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<tb_Product> _tb_Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnViewCountChanging(System.Nullable<int> value);
    partial void OnViewCountChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public tb_ProductCategory()
		{
			this._tb_Products = new EntitySet<tb_Product>(new Action<tb_Product>(this.attach_tb_Products), new Action<tb_Product>(this.detach_tb_Products));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewCount", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_ProductCategory_tb_Product", Storage="_tb_Products", ThisKey="CategoryId", OtherKey="CategoryId")]
		public EntitySet<tb_Product> tb_Products
		{
			get
			{
				return this._tb_Products;
			}
			set
			{
				this._tb_Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_Products(tb_Product entity)
		{
			this.SendPropertyChanging();
			entity.tb_ProductCategory = this;
		}
		
		private void detach_tb_Products(tb_Product entity)
		{
			this.SendPropertyChanging();
			entity.tb_ProductCategory = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Products")]
	public partial class tb_Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private string _Name;
		
		private string _Description;
		
		private int _CategoryId;
		
		private string _Icon;
		
		private string _DetailImage;
		
		private System.Nullable<int> _ViewCount;
		
		private System.Nullable<int> _DownloadCount;
		
		private System.Nullable<bool> _IsHot;
		
		private System.Nullable<bool> _IsRecommend;
		
		private System.Nullable<bool> _IsDeleted;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private System.Data.Linq.Binary _Version;
		
		private int _AccountId;
		
		private EntitySet<tb_ProductAttribute> _tb_ProductAttributes;
		
		private EntityRef<tb_Account> _tb_Account;
		
		private EntityRef<tb_ProductCategory> _tb_ProductCategory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCategoryIdChanging(int value);
    partial void OnCategoryIdChanged();
    partial void OnIconChanging(string value);
    partial void OnIconChanged();
    partial void OnDetailImageChanging(string value);
    partial void OnDetailImageChanged();
    partial void OnViewCountChanging(System.Nullable<int> value);
    partial void OnViewCountChanged();
    partial void OnDownloadCountChanging(System.Nullable<int> value);
    partial void OnDownloadCountChanged();
    partial void OnIsHotChanging(System.Nullable<bool> value);
    partial void OnIsHotChanged();
    partial void OnIsRecommendChanging(System.Nullable<bool> value);
    partial void OnIsRecommendChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    #endregion
		
		public tb_Product()
		{
			this._tb_ProductAttributes = new EntitySet<tb_ProductAttribute>(new Action<tb_ProductAttribute>(this.attach_tb_ProductAttributes), new Action<tb_ProductAttribute>(this.detach_tb_ProductAttributes));
			this._tb_Account = default(EntityRef<tb_Account>);
			this._tb_ProductCategory = default(EntityRef<tb_ProductCategory>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int CategoryId
		{
			get
			{
				return this._CategoryId;
			}
			set
			{
				if ((this._CategoryId != value))
				{
					if (this._tb_ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._CategoryId = value;
					this.SendPropertyChanged("CategoryId");
					this.OnCategoryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Icon", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Icon
		{
			get
			{
				return this._Icon;
			}
			set
			{
				if ((this._Icon != value))
				{
					this.OnIconChanging(value);
					this.SendPropertyChanging();
					this._Icon = value;
					this.SendPropertyChanged("Icon");
					this.OnIconChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DetailImage", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string DetailImage
		{
			get
			{
				return this._DetailImage;
			}
			set
			{
				if ((this._DetailImage != value))
				{
					this.OnDetailImageChanging(value);
					this.SendPropertyChanging();
					this._DetailImage = value;
					this.SendPropertyChanged("DetailImage");
					this.OnDetailImageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViewCount", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> ViewCount
		{
			get
			{
				return this._ViewCount;
			}
			set
			{
				if ((this._ViewCount != value))
				{
					this.OnViewCountChanging(value);
					this.SendPropertyChanging();
					this._ViewCount = value;
					this.SendPropertyChanged("ViewCount");
					this.OnViewCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DownloadCount", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<int> DownloadCount
		{
			get
			{
				return this._DownloadCount;
			}
			set
			{
				if ((this._DownloadCount != value))
				{
					this.OnDownloadCountChanging(value);
					this.SendPropertyChanging();
					this._DownloadCount = value;
					this.SendPropertyChanged("DownloadCount");
					this.OnDownloadCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsHot", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsHot
		{
			get
			{
				return this._IsHot;
			}
			set
			{
				if ((this._IsHot != value))
				{
					this.OnIsHotChanging(value);
					this.SendPropertyChanging();
					this._IsHot = value;
					this.SendPropertyChanged("IsHot");
					this.OnIsHotChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRecommend", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsRecommend
		{
			get
			{
				return this._IsRecommend;
			}
			set
			{
				if ((this._IsRecommend != value))
				{
					this.OnIsRecommendChanging(value);
					this.SendPropertyChanging();
					this._IsRecommend = value;
					this.SendPropertyChanged("IsRecommend");
					this.OnIsRecommendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._tb_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Product_tb_ProductAttribute", Storage="_tb_ProductAttributes", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<tb_ProductAttribute> tb_ProductAttributes
		{
			get
			{
				return this._tb_ProductAttributes;
			}
			set
			{
				this._tb_ProductAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_Product", Storage="_tb_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public tb_Account tb_Account
		{
			get
			{
				return this._tb_Account.Entity;
			}
			set
			{
				tb_Account previousValue = this._tb_Account.Entity;
				if (((previousValue != value) 
							|| (this._tb_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Account.Entity = null;
						previousValue.tb_Products.Remove(this);
					}
					this._tb_Account.Entity = value;
					if ((value != null))
					{
						value.tb_Products.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("tb_Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_ProductCategory_tb_Product", Storage="_tb_ProductCategory", ThisKey="CategoryId", OtherKey="CategoryId", IsForeignKey=true)]
		public tb_ProductCategory tb_ProductCategory
		{
			get
			{
				return this._tb_ProductCategory.Entity;
			}
			set
			{
				tb_ProductCategory previousValue = this._tb_ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._tb_ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_ProductCategory.Entity = null;
						previousValue.tb_Products.Remove(this);
					}
					this._tb_ProductCategory.Entity = value;
					if ((value != null))
					{
						value.tb_Products.Add(this);
						this._CategoryId = value.CategoryId;
					}
					else
					{
						this._CategoryId = default(int);
					}
					this.SendPropertyChanged("tb_ProductCategory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ProductAttributes(tb_ProductAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_Product = this;
		}
		
		private void detach_tb_ProductAttributes(tb_ProductAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_Product = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_ProfileAttributes")]
	public partial class tb_ProfileAttribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileAttributeId;
		
		private int _ProfileId;
		
		private string _FieldName;
		
		private string _Value;
		
		private int _VisibilityLevelId;
		
		private System.DateTime _CreateDate;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<tb_VisibilityLevel> _tb_VisibilityLevel;
		
		private EntityRef<tb_Profile> _tb_Profile;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileAttributeIdChanging(int value);
    partial void OnProfileAttributeIdChanged();
    partial void OnProfileIdChanging(int value);
    partial void OnProfileIdChanged();
    partial void OnFieldNameChanging(string value);
    partial void OnFieldNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnVisibilityLevelIdChanging(int value);
    partial void OnVisibilityLevelIdChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public tb_ProfileAttribute()
		{
			this._tb_VisibilityLevel = default(EntityRef<tb_VisibilityLevel>);
			this._tb_Profile = default(EntityRef<tb_Profile>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileAttributeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProfileAttributeId
		{
			get
			{
				return this._ProfileAttributeId;
			}
			set
			{
				if ((this._ProfileAttributeId != value))
				{
					this.OnProfileAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileAttributeId = value;
					this.SendPropertyChanged("ProfileAttributeId");
					this.OnProfileAttributeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					if (this._tb_Profile.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FieldName", DbType="NVarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string FieldName
		{
			get
			{
				return this._FieldName;
			}
			set
			{
				if ((this._FieldName != value))
				{
					this.OnFieldNameChanging(value);
					this.SendPropertyChanging();
					this._FieldName = value;
					this.SendPropertyChanged("FieldName");
					this.OnFieldNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_VisibilityLevelId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int VisibilityLevelId
		{
			get
			{
				return this._VisibilityLevelId;
			}
			set
			{
				if ((this._VisibilityLevelId != value))
				{
					if (this._tb_VisibilityLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVisibilityLevelIdChanging(value);
					this.SendPropertyChanging();
					this._VisibilityLevelId = value;
					this.SendPropertyChanged("VisibilityLevelId");
					this.OnVisibilityLevelIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_VisibilityLevel_tb_ProfileAttribute", Storage="_tb_VisibilityLevel", ThisKey="VisibilityLevelId", OtherKey="VisibilityLevelId", IsForeignKey=true)]
		public tb_VisibilityLevel tb_VisibilityLevel
		{
			get
			{
				return this._tb_VisibilityLevel.Entity;
			}
			set
			{
				tb_VisibilityLevel previousValue = this._tb_VisibilityLevel.Entity;
				if (((previousValue != value) 
							|| (this._tb_VisibilityLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_VisibilityLevel.Entity = null;
						previousValue.tb_ProfileAttributes.Remove(this);
					}
					this._tb_VisibilityLevel.Entity = value;
					if ((value != null))
					{
						value.tb_ProfileAttributes.Add(this);
						this._VisibilityLevelId = value.VisibilityLevelId;
					}
					else
					{
						this._VisibilityLevelId = default(int);
					}
					this.SendPropertyChanged("tb_VisibilityLevel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Profile_tb_ProfileAttribute", Storage="_tb_Profile", ThisKey="ProfileId", OtherKey="ProfileId", IsForeignKey=true)]
		public tb_Profile tb_Profile
		{
			get
			{
				return this._tb_Profile.Entity;
			}
			set
			{
				tb_Profile previousValue = this._tb_Profile.Entity;
				if (((previousValue != value) 
							|| (this._tb_Profile.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Profile.Entity = null;
						previousValue.tb_ProfileAttributes.Remove(this);
					}
					this._tb_Profile.Entity = value;
					if ((value != null))
					{
						value.tb_ProfileAttributes.Add(this);
						this._ProfileId = value.ProfileId;
					}
					else
					{
						this._ProfileId = default(int);
					}
					this.SendPropertyChanged("tb_Profile");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Profiles")]
	public partial class tb_Profile : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfileId;
		
		private int _AccountId;
		
		private string _ProfileName;
		
		private string _HomePageUrl;
		
		private string _RealName;
		
		private string _Address;
		
		private string _PhoneNumber;
		
		private string _IMQQ;
		
		private string _IMMSN;
		
		private System.DateTime _CreateDate;
		
		private System.Nullable<System.DateTime> _LastUpdateDate;
		
		private string _Avatar;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<tb_ProfileAttribute> _tb_ProfileAttributes;
		
		private EntityRef<tb_Account> _tb_Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfileIdChanging(int value);
    partial void OnProfileIdChanged();
    partial void OnAccountIdChanging(int value);
    partial void OnAccountIdChanged();
    partial void OnProfileNameChanging(string value);
    partial void OnProfileNameChanged();
    partial void OnHomePageUrlChanging(string value);
    partial void OnHomePageUrlChanged();
    partial void OnRealNameChanging(string value);
    partial void OnRealNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnIMQQChanging(string value);
    partial void OnIMQQChanged();
    partial void OnIMMSNChanging(string value);
    partial void OnIMMSNChanged();
    partial void OnCreateDateChanging(System.DateTime value);
    partial void OnCreateDateChanged();
    partial void OnLastUpdateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnLastUpdateDateChanged();
    partial void OnAvatarChanging(string value);
    partial void OnAvatarChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public tb_Profile()
		{
			this._tb_ProfileAttributes = new EntitySet<tb_ProfileAttribute>(new Action<tb_ProfileAttribute>(this.attach_tb_ProfileAttributes), new Action<tb_ProfileAttribute>(this.detach_tb_ProfileAttributes));
			this._tb_Account = default(EntityRef<tb_Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int ProfileId
		{
			get
			{
				return this._ProfileId;
			}
			set
			{
				if ((this._ProfileId != value))
				{
					this.OnProfileIdChanging(value);
					this.SendPropertyChanging();
					this._ProfileId = value;
					this.SendPropertyChanged("ProfileId");
					this.OnProfileIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public int AccountId
		{
			get
			{
				return this._AccountId;
			}
			set
			{
				if ((this._AccountId != value))
				{
					if (this._tb_Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIdChanging(value);
					this.SendPropertyChanging();
					this._AccountId = value;
					this.SendPropertyChanged("AccountId");
					this.OnAccountIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfileName", DbType="NVarChar(200) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProfileName
		{
			get
			{
				return this._ProfileName;
			}
			set
			{
				if ((this._ProfileName != value))
				{
					this.OnProfileNameChanging(value);
					this.SendPropertyChanging();
					this._ProfileName = value;
					this.SendPropertyChanged("ProfileName");
					this.OnProfileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomePageUrl", DbType="NVarChar(300)", UpdateCheck=UpdateCheck.Never)]
		public string HomePageUrl
		{
			get
			{
				return this._HomePageUrl;
			}
			set
			{
				if ((this._HomePageUrl != value))
				{
					this.OnHomePageUrlChanging(value);
					this.SendPropertyChanging();
					this._HomePageUrl = value;
					this.SendPropertyChanged("HomePageUrl");
					this.OnHomePageUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RealName", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string RealName
		{
			get
			{
				return this._RealName;
			}
			set
			{
				if ((this._RealName != value))
				{
					this.OnRealNameChanging(value);
					this.SendPropertyChanging();
					this._RealName = value;
					this.SendPropertyChanged("RealName");
					this.OnRealNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMQQ", DbType="NVarChar(50)", UpdateCheck=UpdateCheck.Never)]
		public string IMQQ
		{
			get
			{
				return this._IMQQ;
			}
			set
			{
				if ((this._IMQQ != value))
				{
					this.OnIMQQChanging(value);
					this.SendPropertyChanging();
					this._IMQQ = value;
					this.SendPropertyChanged("IMQQ");
					this.OnIMQQChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IMMSN", DbType="NVarChar(100)", UpdateCheck=UpdateCheck.Never)]
		public string IMMSN
		{
			get
			{
				return this._IMMSN;
			}
			set
			{
				if ((this._IMMSN != value))
				{
					this.OnIMMSNChanging(value);
					this.SendPropertyChanging();
					this._IMMSN = value;
					this.SendPropertyChanged("IMMSN");
					this.OnIMMSNChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="NVarChar(200)", UpdateCheck=UpdateCheck.Never)]
		public string Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Profile_tb_ProfileAttribute", Storage="_tb_ProfileAttributes", ThisKey="ProfileId", OtherKey="ProfileId")]
		public EntitySet<tb_ProfileAttribute> tb_ProfileAttributes
		{
			get
			{
				return this._tb_ProfileAttributes;
			}
			set
			{
				this._tb_ProfileAttributes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Account_tb_Profile", Storage="_tb_Account", ThisKey="AccountId", OtherKey="AccountId", IsForeignKey=true)]
		public tb_Account tb_Account
		{
			get
			{
				return this._tb_Account.Entity;
			}
			set
			{
				tb_Account previousValue = this._tb_Account.Entity;
				if (((previousValue != value) 
							|| (this._tb_Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._tb_Account.Entity = null;
						previousValue.tb_Profiles.Remove(this);
					}
					this._tb_Account.Entity = value;
					if ((value != null))
					{
						value.tb_Profiles.Add(this);
						this._AccountId = value.AccountId;
					}
					else
					{
						this._AccountId = default(int);
					}
					this.SendPropertyChanged("tb_Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_ProfileAttributes(tb_ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_Profile = this;
		}
		
		private void detach_tb_ProfileAttributes(tb_ProfileAttribute entity)
		{
			this.SendPropertyChanging();
			entity.tb_Profile = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.tb_Terms")]
	public partial class tb_Term : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TermId;
		
		private string _Terms;
		
		private System.Nullable<System.DateTime> _CreateDate;
		
		private System.Nullable<bool> _IsCurrentUsed;
		
		private System.Data.Linq.Binary _Version;
		
		private System.DateTime _LastUpdateDate;
		
		private string _Name;
		
		private EntitySet<tb_Account> _tb_Accounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTermIdChanging(int value);
    partial void OnTermIdChanged();
    partial void OnTermsChanging(string value);
    partial void OnTermsChanged();
    partial void OnCreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreateDateChanged();
    partial void OnIsCurrentUsedChanging(System.Nullable<bool> value);
    partial void OnIsCurrentUsedChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    partial void OnLastUpdateDateChanging(System.DateTime value);
    partial void OnLastUpdateDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public tb_Term()
		{
			this._tb_Accounts = new EntitySet<tb_Account>(new Action<tb_Account>(this.attach_tb_Accounts), new Action<tb_Account>(this.detach_tb_Accounts));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TermId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int TermId
		{
			get
			{
				return this._TermId;
			}
			set
			{
				if ((this._TermId != value))
				{
					this.OnTermIdChanging(value);
					this.SendPropertyChanging();
					this._TermId = value;
					this.SendPropertyChanged("TermId");
					this.OnTermIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Terms", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Terms
		{
			get
			{
				return this._Terms;
			}
			set
			{
				if ((this._Terms != value))
				{
					this.OnTermsChanging(value);
					this.SendPropertyChanging();
					this._Terms = value;
					this.SendPropertyChanged("Terms");
					this.OnTermsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateDate", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<System.DateTime> CreateDate
		{
			get
			{
				return this._CreateDate;
			}
			set
			{
				if ((this._CreateDate != value))
				{
					this.OnCreateDateChanging(value);
					this.SendPropertyChanging();
					this._CreateDate = value;
					this.SendPropertyChanged("CreateDate");
					this.OnCreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsCurrentUsed", DbType="Bit", UpdateCheck=UpdateCheck.Never)]
		public System.Nullable<bool> IsCurrentUsed
		{
			get
			{
				return this._IsCurrentUsed;
			}
			set
			{
				if ((this._IsCurrentUsed != value))
				{
					this.OnIsCurrentUsedChanging(value);
					this.SendPropertyChanging();
					this._IsCurrentUsed = value;
					this.SendPropertyChanged("IsCurrentUsed");
					this.OnIsCurrentUsedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion", IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastUpdateDate", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		public System.DateTime LastUpdateDate
		{
			get
			{
				return this._LastUpdateDate;
			}
			set
			{
				if ((this._LastUpdateDate != value))
				{
					this.OnLastUpdateDateChanging(value);
					this.SendPropertyChanging();
					this._LastUpdateDate = value;
					this.SendPropertyChanged("LastUpdateDate");
					this.OnLastUpdateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(500)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="tb_Term_tb_Account", Storage="_tb_Accounts", ThisKey="TermId", OtherKey="TermId")]
		public EntitySet<tb_Account> tb_Accounts
		{
			get
			{
				return this._tb_Accounts;
			}
			set
			{
				this._tb_Accounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_tb_Accounts(tb_Account entity)
		{
			this.SendPropertyChanging();
			entity.tb_Term = this;
		}
		
		private void detach_tb_Accounts(tb_Account entity)
		{
			this.SendPropertyChanging();
			entity.tb_Term = null;
		}
	}
}
#pragma warning restore 1591
